import numpy as np

class Perceptron(object):
    def __init__(self, eta=0.01, n_iter=50, random_state=1):
        self.eta = eta
        self.n_iter = n_iter
        self.random_state = random_state

    def fit(self, X, y):

        rgen = np.random.RandomState(self.random_state)
        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=(1 + X.shape[1]))
        #print(X.shape[0])
        #print(X.shape[1])
        #plt.hist(self.w_)
        print(self.w_)
        self.errors_ = []

        for _ in range(self.n_iter):
            errors = 0
            count = 0
            for xi, target in zip(X, y):
                update = self.eta * (target - self.predict(xi))
                if update != 0.0:
                    self.w_[1:] += update * xi
                    self.w_[0] += update
                    print(_ , count, self.w_[1:], update * xi )
                count += 1
                errors += int(update != 0.0)
            self.errors_.append(errors)
        return self

    def net_input(self, X):
        return np.dot(X, self.w_[1:]) + self.w_[0]

    def predict(self, X):
        return np.where(self.net_input(X) >= 0.0, 1, -1)

import pandas as pd

df = pd.read_csv('https://archive.ics.uci.edu/ml/'
        'machine-learning-databases/iris/iris.data', header=None)
df.tail()

#%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

# setosa와 versicolor를 선택합니다
y = df.iloc[0:100, 4].values
y = np.where(y == 'Iris-setosa', -1, 1)

# 꽃받침 길이와 꽃잎 길이를 추출합니다
X = df.iloc[0:100, [0, 2]].values

# 산점도를 그립니다
plt.scatter(X[:50, 0], X[:50, 1],
            color='red', marker='o', label='setosa')
plt.scatter(X[50:100, 0], X[50:100, 1],
            color='blue', marker='x', label='versicolor')

plt.xlabel('sepal length [cm]')
plt.ylabel('petal length [cm]')
plt.legend(loc='upper left')

plt.show()

ppn = Perceptron(eta=0.1, n_iter=10)
ppn.fit(X, y)

#plt.plot(range(1, len(ppn.errors_) + 1), ppn.errors_, marker='o')
plt.xlabel('Epochs')
plt.ylabel('Number of errors')

from matplotlib.colors import ListedColormap

test_1 = []
test_2 = []
test_3 = []
test_4 = []
test_5 = []
test_6 = []

def plot_decision_regions(X, y, classifier, resolution=0.02):
    global test_1
    global test_2
    global test_3
    global test_4
    global test_5
    global test_6

    # 마커와 컬러맵을 설정합니다
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])   
    print(type(cmap))

# 결정 경계를 그립니다
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    
    print(x1_min, x1_max , x2_min ,x2_max)
    
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
    test_1 = xx1
    test_2 = xx2
    
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    test_3 = xx1.ravel()
    test_4 = xx2.ravel()
    test_5 = np.array([xx1.ravel(), xx2.ravel()])
    test_6 = np.array([xx1.ravel(), xx2.ravel()]).T

    Z = Z.reshape(xx1.shape)
    
    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap = cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())

# 샘플의 산점도를 그립니다
    for idx, cl in enumerate(np.unique(y)):
        
        plt.scatter(x=X[y == cl, 0], 
                    y=X[y == cl, 1],
                    alpha=0.8, 
                    c=colors[idx],
                    marker=markers[idx], 
                    label=cl, 
                    edgecolor='black')

plot_decision_regions(X, y, classifier=ppn)

plt.xlabel('sepal length [cm]')
plt.ylabel('petal length [cm]')
plt.legend(loc='upper left')
plt.show()
