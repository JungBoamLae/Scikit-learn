import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning)

bike_df = pd.read_csv('D:/aa/ss/train.csv')
print(bike_df.shape)

bike_copy = bike_df.copy()
print(bike_copy.info())
temp = bike_copy.describe()

bike_copy['datetime'] = bike_copy.datetime.apply(pd.to_datetime)

'''
bike_copy['year'] = bike_copy.datetime.apply(lambda x: x[0:4])
bike_copy['month'] = bike_copy.datetime.apply(lambda x: x[5:7])
bike_copy['day'] = bike_copy.datetime.apply(lambda x: x[8:10])
bike_copy['hour'] = bike_copy.datetime.apply(lambda x: x[11:13])
'''


bike_copy['year'] = bike_copy.datetime.apply(lambda x : x.year)
bike_copy['month'] = bike_copy.datetime.apply(lambda x : x.month)
bike_copy['day'] = bike_copy.datetime.apply(lambda x : x.day)
bike_copy['hour'] = bike_copy.datetime.apply(lambda x: x.hour)


print(bike_copy.info())

bike_copy.drop(['datetime','casual','registered'], axis = 1 , inplace = True)


y_target = bike_copy['count']
x_features = bike_copy.drop(['count'], axis = 1 , inplace = False)

X_train, X_test , y_train, y_test = train_test_split(x_features , y_target, test_size = 0.3, random_state = 0)

lr_reg = LinearRegression()
lr_reg.fit(X_train, y_train)
pred = lr_reg.predict(X_test)

print(mean_squared_error(y_test, pred))
print(mean_absolute_error(y_test, pred))

'''
1. Null값 확인
2. 데이터 이상 분포 확인
3. datatime(string) year, month , day, hour 4개의 column을 추가하여서 분리하여 int값으로 각각 저장
4. 'datatime', 'casual', 'registerd' 삭제 
5. 'count' column target 데이터로 분리
6. feature data 와 target data 분리. 비율:0.3
7. LinearRegression 통해서 학습 및 예측
8. mean_squared_error , mean_absolute_error 패키지를 이용하여서 MSE 와 MAE를 구한다
사용예시 : mean_absolute_error(y_test ,y_pred)
'''
